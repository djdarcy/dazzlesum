name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
      fail-fast: false  # Don't cancel all jobs if one fails
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # For Python 3.7, we might need to install wheel first
        pip install wheel
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Run full flake8 check (will fail build on serious issues)
        flake8 . --count --statistics
    
    - name: Type check with mypy
      run: |
        mypy dazzlesum.py --ignore-missing-imports
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        python tests/run_tests.py --unit --coverage
    
    - name: Run integration tests
      run: |
        python tests/run_tests.py --integration
    
    - name: Run CLI tests
      run: |
        python tests/run_tests.py --cli
      
  build:
    runs-on: ubuntu-22.04
    needs: [test]
    if: success() || failure()  # Run even if some tests fail
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    
    - name: Generate Build Version
      id: version
      run: |
        # Extract base version from dazzlesum.py
        BASE_VERSION=$(grep -E "MAJOR, MINOR, PATCH = [0-9, ]+$" dazzlesum.py | sed 's/.*= //' | tr -d ' ' | tr ',' '.')
        BUILD_DATE=$(date +%Y%m%d)
        COMMIT_HASH=$(git rev-parse --short=8 HEAD)
        BUILD_NUMBER=$(git rev-list --count HEAD)
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          VERSION="${BASE_VERSION}_${BUILD_NUMBER}-${BUILD_DATE}-${COMMIT_HASH}-pr"
        else
          VERSION="${BASE_VERSION}_${BUILD_NUMBER}-${BUILD_DATE}-${COMMIT_HASH}"
        fi
        
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Build package
      run: |
        export DAZZLESUM_VERSION="${{ env.VERSION }}"
        python -m build
    
    - name: Check package
      run: |
        pip install twine
        twine check dist/*
    
    - name: Test installation
      run: |
        pip install dist/*.whl
        dazzlesum --version
        dazzlesum --help
